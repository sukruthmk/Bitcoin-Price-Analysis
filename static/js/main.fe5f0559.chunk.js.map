{"version":3,"sources":["core/enum/dateRanges.js","core/framework/layout.js","core/enum/currency.js","components/table/index.js","components/widget/chart.js","components/widget/summary.js","components/widget/index.js","App.js","serviceWorker.js","index.js"],"names":["ONE_MONTH","RANGES","MainContainer","Styled","div","props","border","PadContainer","top","bottom","left","right","SubText","font","EUR","INR","USD","BTTable","endDate","startDate","range","React","useState","data","setData","getData","useCallback","currency","a","url","axios","response","resultData","bpi","filteredData","setFilteredData","useEffect","hashMap","map","currencyData","date","price","Date","getDay","fetchData","Table","striped","bordered","hover","Object","keys","key","Chart","setStartDate","setEndDate","setRange","chartData","setChartData","formatDate","d","month","getMonth","day","getDate","year","getFullYear","length","join","setMonth","getUrl","Row","Col","className","Form","Group","controlId","Control","as","value","onChange","e","target","index","Summary","setCurrency","setDate","setPrice","qty","setQty","time","updated","rate_float","calculatedPrice","parseInt","currencyFormatter","Intl","NumberFormat","style","minimumFractionDigits","isNaN","format","type","Widget","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAAaA,EAAY,YAIZC,EAAS,CACpBD,EAHyB,gBADH,Y,+aCCjB,IAAME,EAAgBC,IAAOC,IAAV,IAEZ,SAAAC,GAAK,OAAKA,EAAMC,OAASD,EAAMC,OAAS,SAGzCC,EAAeJ,IAAOC,IAAV,IACN,SAAAC,GAAK,OAAKA,EAAMG,IAAMH,EAAMG,IAAM,QAC/B,SAAAH,GAAK,OAAKA,EAAMI,OAASJ,EAAMI,OAAS,QAC1C,SAAAJ,GAAK,OAAKA,EAAMK,KAAOL,EAAMK,KAAO,QACnC,SAAAL,GAAK,OAAKA,EAAMM,MAAQN,EAAMM,MAAQ,SAG9CC,EAAUT,IAAOC,IAAV,IAEH,SAAAC,GAAK,OAAKA,EAAMQ,KAAOR,EAAMQ,KAAO,S,gDChBxCC,EAAM,MACNC,EAAM,MACNC,EAAM,MCuEJC,EAnEC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAAgBC,GAAgB,EAAvBC,MAAuB,EAAhBD,WAAgB,EACzBE,IAAMC,SAAS,IADU,mBAC1CC,EAD0C,KACpCC,EADoC,KAE3CC,EAAUJ,IAAMK,YAAN,sCACd,WAAMC,GAAN,qBAAAC,EAAA,wDACoB,OAAdT,GAAkC,OAAZD,EAD5B,wDAEQW,EAFR,sEAE6EV,EAF7E,gBAE8FD,EAF9F,qBAEkHS,GAFlH,SAGyBG,IAAMD,GAH/B,OAGQE,EAHR,OAIgBC,EAAeD,EAArBR,KACJA,IACMU,EAAQD,EAARC,IACRV,EAAKI,GAAYM,EACjBT,EAAQD,IARZ,yCADc,sDAYd,CAACJ,EAAWD,EAASK,IAd0B,EAgBTF,IAAMC,SAAS,IAhBN,mBAgB1CY,EAhB0C,KAgB5BC,EAhB4B,KA2CjD,OA1BAd,IAAMe,UAAU,WAAM,2CACpB,4BAAAR,EAAA,qEACQH,EAAQV,GADhB,uBAEQU,EAAQX,GAFhB,uBAGQW,EAAQT,GAHhB,OAIQqB,EAAU,GAChB,CAACvB,EAAKC,EAAKC,GAAKsB,IAAI,SAAAX,GAClB,IAAMY,EAAehB,EAAKI,GAC1B,GAAIY,EAEF,IAAK,IAAMC,KAAQD,EAAc,CAC/B,IAAME,EAAQF,EAAaC,GAEF,IADT,IAAIE,KAAKF,GACbG,UAAkBF,IACvBJ,EAAQG,KACXH,EAAQG,GAAQ,IAElBH,EAAQG,GAAMb,GAAYc,MAKlCN,EAAgBE,GArBlB,0CADoB,uBAAC,WAAD,wBAwBpBO,IACC,CAACrB,EAAML,EAASO,EAASN,IAE1B,kBAAC0B,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,oCACA,4CACA,4CACA,8CAGJ,+BACGC,OAAOC,KAAKhB,GAAcI,IAAI,SAAAE,GAAI,OACjC,wBAAIW,IAAKX,GACP,4BAAKA,GACL,4BAAKN,EAAaM,GAAMzB,IACxB,4BAAKmB,EAAaM,GAAM1B,IACxB,4BAAKoB,EAAaM,GAAMxB,U,wCC8BrBoC,G,MAjFD,SAAC,GAA6D,IAA3DzB,EAA0D,EAA1DA,SAAUP,EAAgD,EAAhDA,MAAOiC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAAe,EACvClC,IAAMC,SAAS,IADwB,mBAClEkC,EADkE,KACvDC,EADuD,KAEnEC,EAAa,SAAAlB,GACjB,IAAImB,EAAI,IAAIjB,KAAKF,GACfoB,EAAQ,IAAMD,EAAEE,WAAa,GAC7BC,EAAM,GAAKH,EAAEI,UACbC,EAAOL,EAAEM,cAKX,OAHIL,EAAMM,OAAS,IAAGN,EAAQ,IAAMA,GAChCE,EAAII,OAAS,IAAGJ,EAAM,IAAMA,GAEzB,CAACE,EAAMJ,EAAOE,GAAKK,KAAK,MAsB3BtC,EApBSR,IAAMK,YAAY,WAC/B,IAAMc,EAAO,IAAIE,KACbvB,EAAY,GACVD,EAAUwC,EAAWlB,GAe3B,OAdIpB,IAAUpB,IACZwC,EAAK4B,SAAS5B,EAAKqB,WAAa,GAChC1C,EAAYuC,EAAWlB,IJ/BF,kBIiCnBpB,IACFoB,EAAK4B,SAAS5B,EAAKqB,WAAa,GAChC1C,EAAYuC,EAAWlB,IJpCL,aIsChBpB,IACFoB,EAAK4B,SAAS5B,EAAKqB,WAAa,IAChC1C,EAAYuC,EAAWlB,IAEzBa,EAAalC,GACbmC,EAAWpC,GACL,+DAAN,OAAsEC,EAAtE,gBAAuFD,EAAvF,qBAA2GS,IAC1G,CAACA,EAAUP,EAAOkC,EAAYD,GACrBgB,GAYZ,OAXAhD,IAAMe,UAAU,WAAM,2CACpB,gCAAAR,EAAA,qEACyBE,IAAMD,GAD/B,OACQE,EADR,QAEUR,EAASQ,EAATR,QAEEU,EAAQV,EAARU,IACRwB,EAAaxB,IALjB,0CADoB,uBAAC,WAAD,wBASpBW,IACC,CAACjB,EAAUE,EAAKT,EAAOqC,IAExB,6BACE,kBAAClD,EAAD,KACE,kBAAC+D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,4BACpB,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,SACHC,MAAO1D,EACP2D,SAAU,SAAAC,GAAC,OAAIzB,EAASyB,EAAEC,OAAOH,SAEhC7E,EAAOqC,IAAI,SAAClB,EAAO8D,GAAR,OACV,4BAAQJ,MAAO1D,EAAO+B,IAAK+B,GACxB9D,YAUnB,kBAACb,EAAD,CAAcC,IAAI,QAChB,kBAAC8D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAWhD,KAAMiC,UCbd2B,EAnEC,SAAC,GAA+B,IAA7BxD,EAA4B,EAA5BA,SAAUyD,EAAkB,EAAlBA,YAAkB,EACrB/D,IAAMC,SAAS,MADM,mBACtCkB,EADsC,KAChC6C,EADgC,OAEnBhE,IAAMC,SAAS,MAFI,mBAEtCmB,EAFsC,KAE/B6C,EAF+B,OAGvBjE,IAAMC,SAAS,GAHQ,mBAGtCiE,EAHsC,KAGjCC,EAHiC,KAI7CnE,IAAMe,UAAU,WAAM,2CACpB,kCAAAR,EAAA,qEACyBE,IAAM,gDAAD,OACsBH,EADtB,UAD9B,OACQI,EADR,QAIUR,EAASQ,EAATR,QAEEU,EAAcV,EAAdU,IAAKwD,EAASlE,EAATkE,KACbJ,EAAQI,EAAKC,SACbJ,EAASrD,EAAIN,GAAUgE,aAR3B,0CADoB,uBAAC,WAAD,wBAYpB/C,IACC,CAACjB,IACJ,IAAMiE,EAAkBC,SAASpD,GAASoD,SAASN,GAC7CO,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvDC,MAAO,WACPtE,SAAUA,EACVuE,sBAAuB,IAEzB,OACE,6BACE,kBAAC3F,EAAD,CAAcC,IAAI,QAChB,kBAACI,EAAD,KAAU2E,EAAV,oBAEF,kBAAChF,EAAD,CAAcC,IAAI,QAChB,4BACI2F,MAAMP,GAGN,IAFA,oCAAGE,EAAkBM,OAAOR,KAK/BpD,GAAQ,kBAAC5B,EAAD,CAASC,KAAK,OAAO2B,IAEhC,kBAACjC,EAAD,CAAcC,IAAI,QAChB,kBAACiE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKH,IAAN,KACE,kBAACG,EAAA,EAAKC,MAAN,CAAYG,GAAIN,IAAKI,UAAU,WAC7B,kBAACF,EAAA,EAAKG,QAAN,CACEyB,KAAK,OACLtB,SAAU,SAAAC,GAAC,OAAIQ,EAAOR,EAAEC,OAAOH,QAC/BA,MAAOS,KAGX,kBAACd,EAAA,EAAKC,MAAN,CAAYG,GAAIN,IAAKI,UAAU,iBAC7B,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,SACHE,SAAU,SAAAC,GAAC,OAAII,EAAYJ,EAAEC,OAAOH,QACpCA,MAAOnD,GAEP,4BAAQmD,MAAOhE,GAAMA,GACrB,4BAAQgE,MAAO/D,GAAMA,GACrB,4BAAQ+D,MAAO9D,GAAMA,UChCtBsF,EAxBA,SAAC,GAAmD,IAAjDlF,EAAgD,EAAhDA,MAAOiC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAAe,EAChClC,IAAMC,SAASP,GADiB,mBACzDY,EADyD,KAC/CyD,EAD+C,KAEhE,OACE,kBAAClF,EAAD,CAAeI,OAAO,qBACpB,kBAACiG,EAAA,EAAD,KACE,kBAACjC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAS5C,SAAUA,EAAUyD,YAAaA,KAE5C,kBAACb,EAAA,EAAD,KACE,kBAAC,EAAD,CACE5C,SAAUA,EACVP,MAAOA,EACPiC,aAAcA,EACdC,WAAYA,EACZC,SAAUA,SCSTiD,MAzBf,WAAgB,IAAD,EACanF,IAAMC,SAAStB,GAD5B,mBACNoB,EADM,KACCmC,EADD,OAEqBlC,IAAMC,SAAS,MAFpC,mBAENH,EAFM,KAEKkC,EAFL,OAGiBhC,IAAMC,SAAS,MAHhC,mBAGNJ,EAHM,KAGGoC,EAHH,KAIb,OACE,6BACE,kBAACpD,EAAD,KACE,kBAAC,EAAD,CACEkB,MAAOA,EACPiC,aAAcA,EACdC,WAAYA,EACZC,SAAUA,KAGd,kBAACrD,EAAD,KACE,kBAAC,EAAD,CACAgB,QAASA,EACTE,MAAOA,EACPD,UAAWA,OCbCsF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fe5f0559.chunk.js","sourcesContent":["export const ONE_MONTH = \"One Month\";\nexport const ONE_YEAR = \"One Year\";\nexport const THREE_MONTH = \"Three Month`s\";\n\nexport const RANGES = [\n  ONE_MONTH,\n  THREE_MONTH,\n  ONE_YEAR\n];\n","import Styled from \"styled-components\";\n\nexport const MainContainer = Styled.div`\n    padding: 30px;\n    border: ${props => (props.border ? props.border : \"none\")};\n`;\n\nexport const PadContainer = Styled.div`\n    padding-top: ${props => (props.top ? props.top : \"none\")};\n    padding-bottom: ${props => (props.bottom ? props.bottom : \"none\")};\n    padding-left: ${props => (props.left ? props.left : \"none\")};\n    padding-right: ${props => (props.right ? props.right : \"none\")};\n`;\n\nexport const SubText = Styled.div`\n    color: #8c8c8c;\n    font-size: ${props => (props.font ? props.font : \"12pt\")};\n    font-weigtht: 200;\n`;\n","export const EUR = \"EUR\";\nexport const INR = \"INR\";\nexport const USD = \"USD\";","import axios from \"axios\";\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nimport { EUR, INR, USD } from \"../../core/enum/currency\";\n\nconst BTTable = ({ endDate, range, startDate }) => {\n  const [data, setData] = React.useState({});\n  const getData = React.useCallback(\n    async currency => {\n      if (startDate === null || endDate === null) return;\n      const url = `https://api.coindesk.com/v1/bpi/historical/close.json?start=${startDate}&end=${endDate}&currency=${currency}`;\n      const response = await axios(url);\n      const { data: resultData } = response;\n      if (data) {\n        const { bpi } = resultData;\n        data[currency] = bpi;\n        setData(data);\n      }\n    },\n    [startDate, endDate, data]\n  );\n  const [filteredData, setFilteredData] = React.useState({});\n  React.useEffect(() => {\n    async function fetchData() {\n      await getData(INR);\n      await getData(EUR);\n      await getData(USD);\n      const hashMap = {};\n      [EUR, INR, USD].map(currency => {\n        const currencyData = data[currency];\n        if (currencyData) {\n          // eslint-disable-next-line no-unused-vars\n          for (const date in currencyData) {\n            const price = currencyData[date];\n            const dateObj = new Date(date);\n            if (dateObj.getDay() === 5 && price) {\n              if (!hashMap[date]) {\n                hashMap[date] = {};\n              }\n              hashMap[date][currency] = price;\n            }\n          }\n        }\n      });\n      setFilteredData(hashMap);\n    }\n    fetchData();\n  }, [data, endDate, getData, startDate]);\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Price in INR</th>\n          <th>Price in EUR</th>\n          <th>Price in USD</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(filteredData).map(date => (\n          <tr key={date}>\n            <td>{date}</td>\n            <td>{filteredData[date][INR]}</td>\n            <td>{filteredData[date][EUR]}</td>\n            <td>{filteredData[date][USD]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default BTTable;\n","import axios from \"axios\";\nimport React from \"react\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nimport { LineChart } from \"react-chartkick\";\nimport \"chart.js\";\n\nimport {\n  ONE_MONTH,\n  ONE_YEAR,\n  THREE_MONTH,\n  RANGES\n} from \"../../core/enum/dateRanges\";\nimport { PadContainer } from \"../../core/framework/layout\";\n\nconst Chart = ({ currency, range, setStartDate, setEndDate, setRange }) => {\n  const [chartData, setChartData] = React.useState({});\n  const formatDate = date => {\n    var d = new Date(date),\n      month = \"\" + (d.getMonth() + 1),\n      day = \"\" + d.getDate(),\n      year = d.getFullYear();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n\n    return [year, month, day].join(\"-\");\n  };\n  const getUrl = React.useCallback(() => {\n    const date = new Date();\n    let startDate = \"\";\n    const endDate = formatDate(date);\n    if (range === ONE_MONTH) {\n      date.setMonth(date.getMonth() - 1);\n      startDate = formatDate(date);\n    }\n    if (range === THREE_MONTH) {\n      date.setMonth(date.getMonth() - 3);\n      startDate = formatDate(date);\n    }\n    if (range === ONE_YEAR) {\n      date.setMonth(date.getMonth() - 12);\n      startDate = formatDate(date);\n    }\n    setStartDate(startDate);\n    setEndDate(endDate);\n    return `https://api.coindesk.com/v1/bpi/historical/close.json?start=${startDate}&end=${endDate}&currency=${currency}`;\n  }, [currency, range, setEndDate, setStartDate]);\n  const url = getUrl();\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await axios(url);\n      const { data } = response;\n      if (data) {\n        const { bpi } = data;\n        setChartData(bpi);\n      }\n    }\n    fetchData();\n  }, [currency, url, range, setChartData]);\n  return (\n    <div>\n      <PadContainer>\n        <Row>\n          <Col>\n            <div className=\"float-right\">\n              <Form>\n                <Form.Group controlId=\"exampleForm.ControlRange\">\n                  <Form.Control\n                    as=\"select\"\n                    value={range}\n                    onChange={e => setRange(e.target.value)}\n                  >\n                    {RANGES.map((range, index) => (\n                      <option value={range} key={index}>\n                        {range}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              </Form>\n            </div>\n          </Col>\n        </Row>\n      </PadContainer>\n      <PadContainer top=\"15px\">\n        <Row>\n          <Col>\n            <LineChart data={chartData} />\n          </Col>\n        </Row>\n      </PadContainer>\n    </div>\n  );\n};\n\nexport default Chart;\n","import axios from \"axios\";\nimport React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\nimport { EUR, INR, USD } from \"../../core/enum/currency\";\nimport { PadContainer, SubText } from \"../../core/framework/layout\";\n\nconst Summary = ({ currency, setCurrency }) => {\n  const [date, setDate] = React.useState(null);\n  const [price, setPrice] = React.useState(null);\n  const [qty, setQty] = React.useState(1);\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await axios(\n        `https://api.coindesk.com/v1/bpi/currentprice/${currency}.json`\n      );\n      const { data } = response;\n      if (data) {\n        const { bpi, time } = data;\n        setDate(time.updated);\n        setPrice(bpi[currency].rate_float);\n      }\n    }\n    fetchData();\n  }, [currency]);\n  const calculatedPrice = parseInt(price) * parseInt(qty);\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: currency,\n    minimumFractionDigits: 2\n  });\n  return (\n    <div>\n      <PadContainer top=\"15px\">\n        <SubText>{qty} Bitcoin equals</SubText>\n      </PadContainer>\n      <PadContainer top=\"15px\">\n        <h4>\n          {!isNaN(calculatedPrice) ? (\n            <>{currencyFormatter.format(calculatedPrice)}</>\n          ) : (\n            \"0\"\n          )}\n        </h4>\n        {date && <SubText font=\"8pt\">{date}</SubText>}\n      </PadContainer>\n      <PadContainer top=\"15px\">\n        <Form>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formQty\">\n              <Form.Control\n                type=\"text\"\n                onChange={e => setQty(e.target.value)}\n                value={qty}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formGridState\">\n              <Form.Control\n                as=\"select\"\n                onChange={e => setCurrency(e.target.value)}\n                value={currency}\n              >\n                <option value={EUR}>{EUR}</option>\n                <option value={INR}>{INR}</option>\n                <option value={USD}>{USD}</option>\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </PadContainer>\n    </div>\n  );\n};\n\nexport default Summary;\n","import React from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nimport { INR } from \"../../core/enum/currency\";\nimport Chart from \"./chart\";\nimport Summary from \"./summary\";\nimport { MainContainer } from \"../../core/framework/layout\";\n\nconst Widget = ({ range, setStartDate, setEndDate, setRange }) => {\n  const [currency, setCurrency] = React.useState(INR);\n  return (\n    <MainContainer border=\"1px solid #8c8c8c\">\n      <Container>\n        <Row>\n          <Col>\n            <Summary currency={currency} setCurrency={setCurrency} />\n          </Col>\n          <Col>\n            <Chart\n              currency={currency}\n              range={range}\n              setStartDate={setStartDate}\n              setEndDate={setEndDate}\n              setRange={setRange}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </MainContainer>\n  );\n};\n\nexport default Widget;\n","import React from \"react\";\n\nimport { ONE_MONTH } from \"./core/enum/dateRanges\";\nimport { MainContainer } from \"./core/framework/layout\";\nimport Table from \"./components/table\";\nimport Widget from \"./components/widget\";\n\nfunction App() {\n  const [range, setRange] = React.useState(ONE_MONTH);\n  const [startDate, setStartDate] = React.useState(null);\n  const [endDate, setEndDate] = React.useState(null);\n  return (\n    <div>\n      <MainContainer>\n        <Widget\n          range={range}\n          setStartDate={setStartDate}\n          setEndDate={setEndDate}\n          setRange={setRange}\n        />\n      </MainContainer>\n      <MainContainer>\n        <Table \n        endDate={endDate}\n        range={range}\n        startDate={startDate}\n        />\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}